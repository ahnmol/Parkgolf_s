{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport const useModal = () => {\n  _s();\n  const [modalData, setModalData] = useState(null);\n  const handleOpenScoreModal = (rowIndex, courses, totalDays) => {\n    if (!courses || !Object.keys(courses).length) {\n      alert(\"먼저 코스를 추가하세요.\");\n      return;\n    }\n    const allScores = {};\n    Object.keys(courses).forEach(col => {\n      allScores[col] = courses[col].map(v => v === 0 ? '' : v.toString());\n    });\n    const initialScores = {};\n    Object.keys(courses).forEach(col => {\n      if (col.includes('_1일차')) {\n        initialScores[col] = allScores[col];\n      }\n    });\n    setModalData({\n      rowIndex,\n      scores: initialScores,\n      selectedDay: 1,\n      totalDays,\n      allScores\n    });\n  };\n  const handleCloseModal = () => {\n    setModalData(null);\n  };\n  const handleScoreChange = (courseKey, holeIndex, value) => {\n    setModalData(prev => {\n      const newScores = {\n        ...prev.scores\n      };\n      const newAllScores = {\n        ...prev.allScores\n      };\n      newScores[courseKey][holeIndex] = value;\n      newAllScores[courseKey][holeIndex] = value;\n      return {\n        ...prev,\n        scores: newScores,\n        allScores: newAllScores\n      };\n    });\n  };\n  const handleDayChange = (day, courses) => {\n    setModalData(prev => {\n      const newScores = {};\n      Object.keys(prev.allScores).forEach(col => {\n        if (col.includes(`_${day}일차`)) {\n          newScores[col] = prev.allScores[col];\n        }\n      });\n      return {\n        ...prev,\n        selectedDay: day,\n        scores: newScores\n      };\n    });\n  };\n  return {\n    modalData,\n    setModalData,\n    handleOpenScoreModal,\n    handleCloseModal,\n    handleScoreChange,\n    handleDayChange\n  };\n};\n_s(useModal, \"/ggiqYkN1wZID5RTjDGl89vMerQ=\");","map":{"version":3,"names":["useState","useModal","_s","modalData","setModalData","handleOpenScoreModal","rowIndex","courses","totalDays","Object","keys","length","alert","allScores","forEach","col","map","v","toString","initialScores","includes","scores","selectedDay","handleCloseModal","handleScoreChange","courseKey","holeIndex","value","prev","newScores","newAllScores","handleDayChange","day"],"sources":["C:/Users/tkaak/Downloads/parkgolf_js--/src/hooks/useModal.js"],"sourcesContent":["import { useState } from 'react';\n\nexport const useModal = () => {\n  const [modalData, setModalData] = useState(null);\n\n  const handleOpenScoreModal = (rowIndex, courses, totalDays) => {\n    if (!courses || !Object.keys(courses).length) {\n      alert(\"먼저 코스를 추가하세요.\");\n      return;\n    }\n    \n    const allScores = {};\n    Object.keys(courses).forEach(col => {\n      allScores[col] = courses[col].map(v => v === 0 ? '' : v.toString());\n    });\n    \n    const initialScores = {};\n    Object.keys(courses).forEach(col => {\n      if (col.includes('_1일차')) {\n        initialScores[col] = allScores[col];\n      }\n    });\n    \n    setModalData({ \n      rowIndex, \n      scores: initialScores,\n      selectedDay: 1,\n      totalDays,\n      allScores\n    });\n  };\n\n  const handleCloseModal = () => {\n    setModalData(null);\n  };\n\n  const handleScoreChange = (courseKey, holeIndex, value) => {\n    setModalData(prev => {\n      const newScores = { ...prev.scores };\n      const newAllScores = { ...prev.allScores };\n      \n      newScores[courseKey][holeIndex] = value;\n      newAllScores[courseKey][holeIndex] = value;\n      \n      return {\n        ...prev,\n        scores: newScores,\n        allScores: newAllScores\n      };\n    });\n  };\n\n  const handleDayChange = (day, courses) => {\n    setModalData(prev => {\n      const newScores = {};\n      Object.keys(prev.allScores).forEach(col => {\n        if (col.includes(`_${day}일차`)) {\n          newScores[col] = prev.allScores[col];\n        }\n      });\n\n      return {\n        ...prev,\n        selectedDay: day,\n        scores: newScores\n      };\n    });\n  };\n\n  return {\n    modalData,\n    setModalData,\n    handleOpenScoreModal,\n    handleCloseModal,\n    handleScoreChange,\n    handleDayChange\n  };\n}; "],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMK,oBAAoB,GAAGA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,KAAK;IAC7D,IAAI,CAACD,OAAO,IAAI,CAACE,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,MAAM,EAAE;MAC5CC,KAAK,CAAC,eAAe,CAAC;MACtB;IACF;IAEA,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpBJ,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACO,OAAO,CAACC,GAAG,IAAI;MAClCF,SAAS,CAACE,GAAG,CAAC,GAAGR,OAAO,CAACQ,GAAG,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,KAAK,CAAC,GAAG,EAAE,GAAGA,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC;IAEF,MAAMC,aAAa,GAAG,CAAC,CAAC;IACxBV,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACO,OAAO,CAACC,GAAG,IAAI;MAClC,IAAIA,GAAG,CAACK,QAAQ,CAAC,MAAM,CAAC,EAAE;QACxBD,aAAa,CAACJ,GAAG,CAAC,GAAGF,SAAS,CAACE,GAAG,CAAC;MACrC;IACF,CAAC,CAAC;IAEFX,YAAY,CAAC;MACXE,QAAQ;MACRe,MAAM,EAAEF,aAAa;MACrBG,WAAW,EAAE,CAAC;MACdd,SAAS;MACTK;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMU,gBAAgB,GAAGA,CAAA,KAAM;IAC7BnB,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMoB,iBAAiB,GAAGA,CAACC,SAAS,EAAEC,SAAS,EAAEC,KAAK,KAAK;IACzDvB,YAAY,CAACwB,IAAI,IAAI;MACnB,MAAMC,SAAS,GAAG;QAAE,GAAGD,IAAI,CAACP;MAAO,CAAC;MACpC,MAAMS,YAAY,GAAG;QAAE,GAAGF,IAAI,CAACf;MAAU,CAAC;MAE1CgB,SAAS,CAACJ,SAAS,CAAC,CAACC,SAAS,CAAC,GAAGC,KAAK;MACvCG,YAAY,CAACL,SAAS,CAAC,CAACC,SAAS,CAAC,GAAGC,KAAK;MAE1C,OAAO;QACL,GAAGC,IAAI;QACPP,MAAM,EAAEQ,SAAS;QACjBhB,SAAS,EAAEiB;MACb,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEzB,OAAO,KAAK;IACxCH,YAAY,CAACwB,IAAI,IAAI;MACnB,MAAMC,SAAS,GAAG,CAAC,CAAC;MACpBpB,MAAM,CAACC,IAAI,CAACkB,IAAI,CAACf,SAAS,CAAC,CAACC,OAAO,CAACC,GAAG,IAAI;QACzC,IAAIA,GAAG,CAACK,QAAQ,CAAC,IAAIY,GAAG,IAAI,CAAC,EAAE;UAC7BH,SAAS,CAACd,GAAG,CAAC,GAAGa,IAAI,CAACf,SAAS,CAACE,GAAG,CAAC;QACtC;MACF,CAAC,CAAC;MAEF,OAAO;QACL,GAAGa,IAAI;QACPN,WAAW,EAAEU,GAAG;QAChBX,MAAM,EAAEQ;MACV,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IACL1B,SAAS;IACTC,YAAY;IACZC,oBAAoB;IACpBkB,gBAAgB;IAChBC,iBAAiB;IACjBO;EACF,CAAC;AACH,CAAC;AAAC7B,EAAA,CA3EWD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}