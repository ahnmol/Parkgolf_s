{"ast":null,"code":"export const calculateTotal = courses => {\n  return Object.values(courses).reduce((sum, arr) => sum + arr.reduce((a, b) => a + (b || 0), 0), 0);\n};\n\n// 코스별 점수 합계를 계산하는 함수\nconst calculateCourseTotal = (courses, courseName) => {\n  var _courses$courseName;\n  return ((_courses$courseName = courses[courseName]) === null || _courses$courseName === void 0 ? void 0 : _courses$courseName.reduce((sum, score) => sum + (score || 0), 0)) || 0;\n};\n\n// 두 선수를 비교하는 함수\nconst compareRows = (a, b) => {\n  const aTotal = a.total || 0;\n  const bTotal = b.total || 0;\n  if (aTotal !== bTotal) {\n    return aTotal - bTotal;\n  }\n\n  // 총점이 같을 경우 코스별로 비교 (D > C > B > A 순서)\n  const courseOrder = ['D', 'C', 'B', 'A'];\n  for (const courseLetter of courseOrder) {\n    // 각 일차의 해당 코스 점수를 비교\n    const aCourseScores = Object.keys(a.courses).filter(key => key.startsWith(courseLetter + '_')).map(key => calculateCourseTotal(a.courses, key));\n    const bCourseScores = Object.keys(b.courses).filter(key => key.startsWith(courseLetter + '_')).map(key => calculateCourseTotal(b.courses, key));\n\n    // 해당 코스가 존재하면 비교\n    if (aCourseScores.length > 0 && bCourseScores.length > 0) {\n      const aCourseTotal = aCourseScores.reduce((sum, score) => sum + score, 0);\n      const bCourseTotal = bCourseScores.reduce((sum, score) => sum + score, 0);\n      if (aCourseTotal !== bCourseTotal) {\n        return aCourseTotal - bCourseTotal;\n      }\n    }\n  }\n  return 0; // 모든 코스가 같으면 동점\n};\nexport const getRank = (targetRow, allRows) => {\n  let rank = 1;\n  allRows.forEach(row => {\n    if (compareRows(targetRow, row) > 0) rank++;\n  });\n  return rank;\n};\nexport const sortRows = (rows, key, direction) => {\n  return [...rows].sort((a, b) => {\n    let aVal, bVal;\n    switch (key) {\n      case '조':\n        aVal = parseInt(a.group) || 0;\n        bVal = parseInt(b.group) || 0;\n        break;\n      case '성명':\n        aVal = a.name || '';\n        bVal = b.name || '';\n        break;\n      case '시/도':\n        aVal = a.region || '';\n        bVal = b.region || '';\n        break;\n      case '시작코스':\n        aVal = a.startCourse || '';\n        bVal = b.startCourse || '';\n        break;\n      case '총 합계':\n      case '순위':\n        const comparison = compareRows(a, b);\n        return direction === 'ascending' ? comparison : -comparison;\n      default:\n        if (key.includes('일차') && a.courses && b.courses) {\n          aVal = (a.courses[key] || []).reduce((sum, score) => sum + (parseInt(score) || 0), 0);\n          bVal = (b.courses[key] || []).reduce((sum, score) => sum + (parseInt(score) || 0), 0);\n        } else {\n          aVal = '';\n          bVal = '';\n        }\n    }\n    if (typeof aVal === 'number' && typeof bVal === 'number') {\n      return direction === 'ascending' ? aVal - bVal : bVal - aVal;\n    }\n    return direction === 'ascending' ? String(aVal).localeCompare(String(bVal), 'ko') : String(bVal).localeCompare(String(aVal), 'ko');\n  });\n};","map":{"version":3,"names":["calculateTotal","courses","Object","values","reduce","sum","arr","a","b","calculateCourseTotal","courseName","_courses$courseName","score","compareRows","aTotal","total","bTotal","courseOrder","courseLetter","aCourseScores","keys","filter","key","startsWith","map","bCourseScores","length","aCourseTotal","bCourseTotal","getRank","targetRow","allRows","rank","forEach","row","sortRows","rows","direction","sort","aVal","bVal","parseInt","group","name","region","startCourse","comparison","includes","String","localeCompare"],"sources":["C:/Users/tkaak/Downloads/parkgolf_js--/src/utils/calculations.js"],"sourcesContent":["export const calculateTotal = (courses) => {\n  return Object.values(courses).reduce(\n    (sum, arr) => sum + arr.reduce((a,b)=>a+(b||0), 0),\n    0\n  );\n};\n\n// 코스별 점수 합계를 계산하는 함수\nconst calculateCourseTotal = (courses, courseName) => {\n  return courses[courseName]?.reduce((sum, score) => sum + (score || 0), 0) || 0;\n};\n\n// 두 선수를 비교하는 함수\nconst compareRows = (a, b) => {\n  const aTotal = a.total || 0;\n  const bTotal = b.total || 0;\n\n  if (aTotal !== bTotal) {\n    return aTotal - bTotal;\n  }\n\n  // 총점이 같을 경우 코스별로 비교 (D > C > B > A 순서)\n  const courseOrder = ['D', 'C', 'B', 'A'];\n  for (const courseLetter of courseOrder) {\n    // 각 일차의 해당 코스 점수를 비교\n    const aCourseScores = Object.keys(a.courses)\n      .filter(key => key.startsWith(courseLetter + '_'))\n      .map(key => calculateCourseTotal(a.courses, key));\n    const bCourseScores = Object.keys(b.courses)\n      .filter(key => key.startsWith(courseLetter + '_'))\n      .map(key => calculateCourseTotal(b.courses, key));\n    \n    // 해당 코스가 존재하면 비교\n    if (aCourseScores.length > 0 && bCourseScores.length > 0) {\n      const aCourseTotal = aCourseScores.reduce((sum, score) => sum + score, 0);\n      const bCourseTotal = bCourseScores.reduce((sum, score) => sum + score, 0);\n      \n      if (aCourseTotal !== bCourseTotal) {\n        return aCourseTotal - bCourseTotal;\n      }\n    }\n  }\n  return 0; // 모든 코스가 같으면 동점\n};\n\nexport const getRank = (targetRow, allRows) => {\n  let rank = 1;\n  allRows.forEach(row => {\n    if (compareRows(targetRow, row) > 0) rank++;\n  });\n  return rank;\n};\n\nexport const sortRows = (rows, key, direction) => {\n  return [...rows].sort((a, b) => {\n    let aVal, bVal;\n    \n    switch (key) {\n      case '조': \n        aVal = parseInt(a.group) || 0;\n        bVal = parseInt(b.group) || 0;\n        break;\n      case '성명': aVal = a.name || ''; bVal = b.name || ''; break;\n      case '시/도': aVal = a.region || ''; bVal = b.region || ''; break;\n      case '시작코스': aVal = a.startCourse || ''; bVal = b.startCourse || ''; break;\n      case '총 합계': \n      case '순위':\n        const comparison = compareRows(a, b);\n        return direction === 'ascending' ? comparison : -comparison;\n      default:\n        if (key.includes('일차') && a.courses && b.courses) {\n          aVal = (a.courses[key] || []).reduce((sum, score) => sum + (parseInt(score) || 0), 0);\n          bVal = (b.courses[key] || []).reduce((sum, score) => sum + (parseInt(score) || 0), 0);\n        } else {\n          aVal = ''; bVal = '';\n        }\n    }\n\n    if (typeof aVal === 'number' && typeof bVal === 'number') {\n      return direction === 'ascending' ? aVal - bVal : bVal - aVal;\n    }\n    \n    return direction === 'ascending'\n      ? String(aVal).localeCompare(String(bVal), 'ko')\n      : String(bVal).localeCompare(String(aVal), 'ko');\n  });\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}