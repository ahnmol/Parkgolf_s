{"ast":null,"code":"import { businessCardStyles } from '../styles/businessCardStyles';\nexport const renderBusinessCards = (rows, tournamentName) => {\n  return `\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>명함 인쇄</title>\n        <style>${businessCardStyles.printStyles}</style>\n      </head>\n      <body>\n        ${Array.from({\n    length: Math.ceil(rows.length / 9)\n  }, (_, pageIndex) => {\n    const pageRows = rows.slice(pageIndex * 9, (pageIndex + 1) * 9);\n    if (pageRows.length === 0) return '';\n    return `\n            <div class=\"page\" style=\"${styleToString(businessCardStyles.page)}\">\n              <div class=\"card-container\" style=\"${styleToString(businessCardStyles.cardContainer)}\">\n                ${pageRows.map(row => `\n                  <div class=\"card\" style=\"${styleToString(businessCardStyles.card)}\">\n                    <div class=\"card-header\" style=\"${styleToString(businessCardStyles.cardHeader)}\">${tournamentName}</div>\n                    <div class=\"card-content\" style=\"${styleToString(businessCardStyles.cardContent)}\">\n                      <div class=\"cell\" style=\"${styleToString(businessCardStyles.cell)}\">${row.group}그룹</div>\n                      <div class=\"cell\" style=\"${styleToString({\n      ...businessCardStyles.cell,\n      fontSize: '32px'\n    })}\">${row.region}</div>\n                      <div class=\"cell\" style=\"${styleToString(businessCardStyles.cell)}\">${row.startCourse}</div>\n                      <div class=\"cell\" style=\"${styleToString({\n      ...businessCardStyles.cell,\n      fontSize: '60px',\n      lineHeight: '0.9',\n      padding: '0'\n    })}\">${row.name}</div>\n                    </div>\n                  </div>\n                `).join('')}\n              </div>\n            </div>\n          `;\n  }).filter(Boolean).join('')}\n      </body>\n    </html>\n  `;\n};\n\n// React 스타일 객체를 CSS 문자열로 변환하는 헬퍼 함수\nconst styleToString = style => {\n  return Object.entries(style).map(([key, value]) => `${kebabCase(key)}: ${value}`).join('; ');\n};\n\n// camelCase를 kebab-case로 변환하는 헬퍼 함수\nconst kebabCase = str => {\n  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n};","map":{"version":3,"names":["businessCardStyles","renderBusinessCards","rows","tournamentName","printStyles","Array","from","length","Math","ceil","_","pageIndex","pageRows","slice","styleToString","page","cardContainer","map","row","card","cardHeader","cardContent","cell","group","fontSize","region","startCourse","lineHeight","padding","name","join","filter","Boolean","style","Object","entries","key","value","kebabCase","str","replace","toLowerCase"],"sources":["C:/Users/tkaak/Documents/GitHub/parkgolf_js/src/utils/businessCardUtils.js"],"sourcesContent":["import { businessCardStyles } from '../styles/businessCardStyles';\r\n\r\nexport const renderBusinessCards = (rows, tournamentName) => {\r\n  return `\r\n    <html>\r\n      <head>\r\n        <meta charset=\"utf-8\">\r\n        <title>명함 인쇄</title>\r\n        <style>${businessCardStyles.printStyles}</style>\r\n      </head>\r\n      <body>\r\n        ${Array.from({ length: Math.ceil(rows.length / 9) }, (_, pageIndex) => {\r\n          const pageRows = rows.slice(pageIndex * 9, (pageIndex + 1) * 9);\r\n          if (pageRows.length === 0) return '';\r\n          return `\r\n            <div class=\"page\" style=\"${styleToString(businessCardStyles.page)}\">\r\n              <div class=\"card-container\" style=\"${styleToString(businessCardStyles.cardContainer)}\">\r\n                ${pageRows.map(row => `\r\n                  <div class=\"card\" style=\"${styleToString(businessCardStyles.card)}\">\r\n                    <div class=\"card-header\" style=\"${styleToString(businessCardStyles.cardHeader)}\">${tournamentName}</div>\r\n                    <div class=\"card-content\" style=\"${styleToString(businessCardStyles.cardContent)}\">\r\n                      <div class=\"cell\" style=\"${styleToString(businessCardStyles.cell)}\">${row.group}그룹</div>\r\n                      <div class=\"cell\" style=\"${styleToString({...businessCardStyles.cell, fontSize: '32px'})}\">${row.region}</div>\r\n                      <div class=\"cell\" style=\"${styleToString(businessCardStyles.cell)}\">${row.startCourse}</div>\r\n                      <div class=\"cell\" style=\"${styleToString({...businessCardStyles.cell, fontSize: '60px', lineHeight: '0.9', padding: '0'})}\">${row.name}</div>\r\n                    </div>\r\n                  </div>\r\n                `).join('')}\r\n              </div>\r\n            </div>\r\n          `;\r\n        }).filter(Boolean).join('')}\r\n      </body>\r\n    </html>\r\n  `;\r\n};\r\n\r\n// React 스타일 객체를 CSS 문자열로 변환하는 헬퍼 함수\r\nconst styleToString = (style) => {\r\n  return Object.entries(style)\r\n    .map(([key, value]) => `${kebabCase(key)}: ${value}`)\r\n    .join('; ');\r\n};\r\n\r\n// camelCase를 kebab-case로 변환하는 헬퍼 함수\r\nconst kebabCase = (str) => {\r\n  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\r\n}; "],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,8BAA8B;AAEjE,OAAO,MAAMC,mBAAmB,GAAGA,CAACC,IAAI,EAAEC,cAAc,KAAK;EAC3D,OAAO;AACT;AACA;AACA;AACA;AACA,iBAAiBH,kBAAkB,CAACI,WAAW;AAC/C;AACA;AACA,UAAUC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEC,IAAI,CAACC,IAAI,CAACP,IAAI,CAACK,MAAM,GAAG,CAAC;EAAE,CAAC,EAAE,CAACG,CAAC,EAAEC,SAAS,KAAK;IACrE,MAAMC,QAAQ,GAAGV,IAAI,CAACW,KAAK,CAACF,SAAS,GAAG,CAAC,EAAE,CAACA,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;IAC/D,IAAIC,QAAQ,CAACL,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;IACpC,OAAO;AACjB,uCAAuCO,aAAa,CAACd,kBAAkB,CAACe,IAAI,CAAC;AAC7E,mDAAmDD,aAAa,CAACd,kBAAkB,CAACgB,aAAa,CAAC;AAClG,kBAAkBJ,QAAQ,CAACK,GAAG,CAACC,GAAG,IAAI;AACtC,6CAA6CJ,aAAa,CAACd,kBAAkB,CAACmB,IAAI,CAAC;AACnF,sDAAsDL,aAAa,CAACd,kBAAkB,CAACoB,UAAU,CAAC,KAAKjB,cAAc;AACrH,uDAAuDW,aAAa,CAACd,kBAAkB,CAACqB,WAAW,CAAC;AACpG,iDAAiDP,aAAa,CAACd,kBAAkB,CAACsB,IAAI,CAAC,KAAKJ,GAAG,CAACK,KAAK;AACrG,iDAAiDT,aAAa,CAAC;MAAC,GAAGd,kBAAkB,CAACsB,IAAI;MAAEE,QAAQ,EAAE;IAAM,CAAC,CAAC,KAAKN,GAAG,CAACO,MAAM;AAC7H,iDAAiDX,aAAa,CAACd,kBAAkB,CAACsB,IAAI,CAAC,KAAKJ,GAAG,CAACQ,WAAW;AAC3G,iDAAiDZ,aAAa,CAAC;MAAC,GAAGd,kBAAkB,CAACsB,IAAI;MAAEE,QAAQ,EAAE,MAAM;MAAEG,UAAU,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAG,CAAC,CAAC,KAAKV,GAAG,CAACW,IAAI;AAC5J;AACA;AACA,iBAAiB,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AAC3B;AACA;AACA,WAAW;EACH,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAACF,IAAI,CAAC,EAAE,CAAC;AACnC;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA,MAAMhB,aAAa,GAAImB,KAAK,IAAK;EAC/B,OAAOC,MAAM,CAACC,OAAO,CAACF,KAAK,CAAC,CACzBhB,GAAG,CAAC,CAAC,CAACmB,GAAG,EAAEC,KAAK,CAAC,KAAK,GAAGC,SAAS,CAACF,GAAG,CAAC,KAAKC,KAAK,EAAE,CAAC,CACpDP,IAAI,CAAC,IAAI,CAAC;AACf,CAAC;;AAED;AACA,MAAMQ,SAAS,GAAIC,GAAG,IAAK;EACzB,OAAOA,GAAG,CAACC,OAAO,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAACC,WAAW,CAAC,CAAC;AACjE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}