{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { sortRows } from '../utils/calculations';\nexport const useScoreData = () => {\n  _s();\n  const [rows, setRows] = useState([]);\n  const [courseColumns, setCourseColumns] = useState([]);\n  const [tournamentName, setTournamentName] = useState('');\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: 'ascending'\n  });\n  const [totalDays, setTotalDays] = useState(1);\n\n  // 코스 컬럼을 일차별로 정렬하는 함수\n  const sortCourseColumns = columns => {\n    const letters = [...new Set(columns.map(col => col.split('_')[0]))];\n    const days = [...new Set(columns.map(col => parseInt(col.split('_')[1])))];\n    const sorted = [];\n    for (let day of days) {\n      for (let letter of letters) {\n        const column = columns.find(col => col.startsWith(`${letter}_${day}일차`));\n        if (column) sorted.push(column);\n      }\n    }\n    return sorted;\n  };\n  const handleAddCourse = () => {\n    // 현재 존재하는 고유한 코스 문자 수 계산\n    const uniqueLetters = new Set(courseColumns.map(col => col.split('_')[0])).size;\n\n    // E코스(5개) 이상 추가 방지\n    if (uniqueLetters >= 5) {\n      alert('코스는 최대 E코스(5개)까지만 추가할 수 있습니다.');\n      return;\n    }\n\n    // 다음 코스 문자 계산 (A, B, C, ...)\n    const nextLetter = String.fromCharCode(65 + uniqueLetters);\n\n    // 새로운 코스를 각 일차에 추가\n    const newCourses = Array.from({\n      length: totalDays\n    }, (_, i) => `${nextLetter}_${i + 1}일차 합계`);\n\n    // 모든 행에 새 코스 추가\n    const updated = rows.map(r => {\n      const newCoursesObj = {};\n      newCourses.forEach(course => {\n        newCoursesObj[course] = Array(9).fill(0);\n      });\n      return {\n        ...r,\n        courses: {\n          ...r.courses,\n          ...newCoursesObj\n        }\n      };\n    });\n\n    // 코스 컬럼을 일차별로 정렬하여 설정\n    const newColumns = sortCourseColumns([...courseColumns, ...newCourses]);\n    setCourseColumns(newColumns);\n    setRows(updated);\n  };\n  const handleDeleteCourse = () => {\n    if (!courseColumns.length) return;\n    if (!window.confirm('마지막 코스를 삭제하시겠습니까? 해당 코스의 모든 일차 데이터가 삭제됩니다.')) {\n      return;\n    }\n\n    // 마지막 코스 문자 찾기\n    const lastLetter = [...new Set(courseColumns.map(col => col.split('_')[0]))].pop();\n\n    // 해당 코스의 모든 일차 컬럼 제거\n    const newCols = courseColumns.filter(col => !col.startsWith(lastLetter));\n    const updated = rows.map(r => {\n      const c = {\n        ...r.courses\n      };\n      courseColumns.filter(col => col.startsWith(lastLetter)).forEach(col => {\n        delete c[col];\n      });\n      const newTotal = Object.values(c).reduce((sum, arr) => sum + arr.reduce((a, b) => a + (b || 0), 0), 0);\n      return {\n        ...r,\n        courses: c,\n        total: newTotal\n      };\n    });\n    setCourseColumns(newCols);\n    setRows(updated);\n  };\n  const handleAddDay = () => {\n    const newTotalDays = totalDays + 1;\n    const existingCourseLetters = new Set(courseColumns.map(col => col.split('_')[0]));\n\n    // 각 코스에 대해 새로운 일차 추가\n    const newCourses = Array.from(existingCourseLetters).map(letter => `${letter}_${newTotalDays}일차 합계`);\n    const updated = rows.map(r => {\n      const newCoursesObj = {};\n      newCourses.forEach(course => {\n        newCoursesObj[course] = Array(9).fill(0);\n      });\n      return {\n        ...r,\n        courses: {\n          ...r.courses,\n          ...newCoursesObj\n        }\n      };\n    });\n\n    // 코스 컬럼을 일차별로 정렬하여 설정\n    const newColumns = sortCourseColumns([...courseColumns, ...newCourses]);\n    setCourseColumns(newColumns);\n    setRows(updated);\n    setTotalDays(newTotalDays);\n  };\n  const handleDeleteDay = () => {\n    if (totalDays <= 1) {\n      alert(\"최소 1일차는 유지해야 합니다.\");\n      return;\n    }\n    if (!window.confirm(`${totalDays}일차의 모든 코스 데이터가 삭제됩니다. 계속하시겠습니까?`)) {\n      return;\n    }\n\n    // 마지막 일차의 모든 코스 컬럼 제거\n    const newCols = courseColumns.filter(col => !col.includes(`_${totalDays}일차`));\n    const updated = rows.map(r => {\n      const c = {\n        ...r.courses\n      };\n      courseColumns.filter(col => col.includes(`_${totalDays}일차`)).forEach(col => {\n        delete c[col];\n      });\n      const newTotal = Object.values(c).reduce((sum, arr) => sum + arr.reduce((a, b) => a + (b || 0), 0), 0);\n      return {\n        ...r,\n        courses: c,\n        total: newTotal\n      };\n    });\n    setCourseColumns(newCols);\n    setRows(updated);\n    setTotalDays(totalDays - 1);\n  };\n\n  // 선수 추가 시 유효성 검사\n  const validatePlayerAdd = newPlayer => {\n    // 해당 조의 선수 수 확인\n    const sameGroupPlayers = rows.filter(r => r.group === newPlayer.group);\n    if (sameGroupPlayers.length >= 4) {\n      alert('한 조당 최대 4명까지만 등록할 수 있습니다.');\n      return false;\n    }\n    return true;\n  };\n  const handleSort = key => {\n    let direction = 'ascending';\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({\n      key,\n      direction\n    });\n    const sortedRows = sortRows(rows, key, direction);\n    setRows(sortedRows);\n  };\n  return {\n    rows,\n    setRows,\n    courseColumns,\n    setCourseColumns,\n    tournamentName,\n    setTournamentName,\n    totalDays,\n    setTotalDays,\n    handleAddCourse,\n    handleDeleteCourse,\n    handleAddDay,\n    handleDeleteDay,\n    handleSort,\n    validatePlayerAdd\n  };\n};\n_s(useScoreData, \"ShYcvBRy0CaTQyecfXR6XSpyzRU=\");","map":{"version":3,"names":["useState","sortRows","useScoreData","_s","rows","setRows","courseColumns","setCourseColumns","tournamentName","setTournamentName","sortConfig","setSortConfig","key","direction","totalDays","setTotalDays","sortCourseColumns","columns","letters","Set","map","col","split","days","parseInt","sorted","day","letter","column","find","startsWith","push","handleAddCourse","uniqueLetters","size","alert","nextLetter","String","fromCharCode","newCourses","Array","from","length","_","i","updated","r","newCoursesObj","forEach","course","fill","courses","newColumns","handleDeleteCourse","window","confirm","lastLetter","pop","newCols","filter","c","newTotal","Object","values","reduce","sum","arr","a","b","total","handleAddDay","newTotalDays","existingCourseLetters","handleDeleteDay","includes","validatePlayerAdd","newPlayer","sameGroupPlayers","group","handleSort","sortedRows"],"sources":["C:/Users/tkaak/Documents/GitHub/parkgolf_js/src/hooks/useScoreData.js"],"sourcesContent":["import { useState } from 'react';\nimport { sortRows } from '../utils/calculations';\n\nexport const useScoreData = () => {\n  const [rows, setRows] = useState([]);\n  const [courseColumns, setCourseColumns] = useState([]);\n  const [tournamentName, setTournamentName] = useState('');\n  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' });\n  const [totalDays, setTotalDays] = useState(1);\n\n  // 코스 컬럼을 일차별로 정렬하는 함수\n  const sortCourseColumns = (columns) => {\n    const letters = [...new Set(columns.map(col => col.split('_')[0]))];\n    const days = [...new Set(columns.map(col => parseInt(col.split('_')[1])))];\n    \n    const sorted = [];\n    for (let day of days) {\n      for (let letter of letters) {\n        const column = columns.find(col => col.startsWith(`${letter}_${day}일차`));\n        if (column) sorted.push(column);\n      }\n    }\n    return sorted;\n  };\n\n  const handleAddCourse = () => {\n    // 현재 존재하는 고유한 코스 문자 수 계산\n    const uniqueLetters = new Set(\n      courseColumns.map(col => col.split('_')[0])\n    ).size;\n    \n    // E코스(5개) 이상 추가 방지\n    if (uniqueLetters >= 5) {\n      alert('코스는 최대 E코스(5개)까지만 추가할 수 있습니다.');\n      return;\n    }\n\n    // 다음 코스 문자 계산 (A, B, C, ...)\n    const nextLetter = String.fromCharCode(65 + uniqueLetters);\n    \n    // 새로운 코스를 각 일차에 추가\n    const newCourses = Array.from({ length: totalDays }, (_, i) => \n      `${nextLetter}_${i + 1}일차 합계`\n    );\n\n    // 모든 행에 새 코스 추가\n    const updated = rows.map(r => {\n      const newCoursesObj = {};\n      newCourses.forEach(course => {\n        newCoursesObj[course] = Array(9).fill(0);\n      });\n      return {\n        ...r,\n        courses: { ...r.courses, ...newCoursesObj }\n      };\n    });\n\n    // 코스 컬럼을 일차별로 정렬하여 설정\n    const newColumns = sortCourseColumns([...courseColumns, ...newCourses]);\n    setCourseColumns(newColumns);\n    setRows(updated);\n  };\n\n  const handleDeleteCourse = () => {\n    if (!courseColumns.length) return;\n    \n    if (!window.confirm('마지막 코스를 삭제하시겠습니까? 해당 코스의 모든 일차 데이터가 삭제됩니다.')) {\n      return;\n    }\n    \n    // 마지막 코스 문자 찾기\n    const lastLetter = [...new Set(courseColumns.map(col => col.split('_')[0]))].pop();\n    \n    // 해당 코스의 모든 일차 컬럼 제거\n    const newCols = courseColumns.filter(col => !col.startsWith(lastLetter));\n\n    const updated = rows.map(r => {\n      const c = { ...r.courses };\n      courseColumns.filter(col => col.startsWith(lastLetter)).forEach(col => {\n        delete c[col];\n      });\n      const newTotal = Object.values(c).reduce((sum, arr) => sum + arr.reduce((a,b)=>a+(b||0),0), 0);\n      return { ...r, courses: c, total: newTotal };\n    });\n\n    setCourseColumns(newCols);\n    setRows(updated);\n  };\n\n  const handleAddDay = () => {\n    const newTotalDays = totalDays + 1;\n    const existingCourseLetters = new Set(\n      courseColumns.map(col => col.split('_')[0])\n    );\n\n    // 각 코스에 대해 새로운 일차 추가\n    const newCourses = Array.from(existingCourseLetters).map(\n      letter => `${letter}_${newTotalDays}일차 합계`\n    );\n\n    const updated = rows.map(r => {\n      const newCoursesObj = {};\n      newCourses.forEach(course => {\n        newCoursesObj[course] = Array(9).fill(0);\n      });\n      return {\n        ...r,\n        courses: { ...r.courses, ...newCoursesObj }\n      };\n    });\n\n    // 코스 컬럼을 일차별로 정렬하여 설정\n    const newColumns = sortCourseColumns([...courseColumns, ...newCourses]);\n    setCourseColumns(newColumns);\n    setRows(updated);\n    setTotalDays(newTotalDays);\n  };\n\n  const handleDeleteDay = () => {\n    if (totalDays <= 1) {\n      alert(\"최소 1일차는 유지해야 합니다.\");\n      return;\n    }\n\n    if (!window.confirm(`${totalDays}일차의 모든 코스 데이터가 삭제됩니다. 계속하시겠습니까?`)) {\n      return;\n    }\n\n    // 마지막 일차의 모든 코스 컬럼 제거\n    const newCols = courseColumns.filter(col => !col.includes(`_${totalDays}일차`));\n\n    const updated = rows.map(r => {\n      const c = { ...r.courses };\n      courseColumns.filter(col => col.includes(`_${totalDays}일차`)).forEach(col => {\n        delete c[col];\n      });\n      const newTotal = Object.values(c).reduce((sum, arr) => sum + arr.reduce((a,b)=>a+(b||0),0), 0);\n      return { ...r, courses: c, total: newTotal };\n    });\n\n    setCourseColumns(newCols);\n    setRows(updated);\n    setTotalDays(totalDays - 1);\n  };\n\n  // 선수 추가 시 유효성 검사\n  const validatePlayerAdd = (newPlayer) => {\n    // 해당 조의 선수 수 확인\n    const sameGroupPlayers = rows.filter(r => r.group === newPlayer.group);\n    if (sameGroupPlayers.length >= 4) {\n      alert('한 조당 최대 4명까지만 등록할 수 있습니다.');\n      return false;\n    }\n    return true;\n  };\n\n  const handleSort = (key) => {\n    let direction = 'ascending';\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n\n    const sortedRows = sortRows(rows, key, direction);\n    setRows(sortedRows);\n  };\n\n  return {\n    rows,\n    setRows,\n    courseColumns,\n    setCourseColumns,\n    tournamentName,\n    setTournamentName,\n    totalDays,\n    setTotalDays,\n    handleAddCourse,\n    handleDeleteCourse,\n    handleAddDay,\n    handleDeleteDay,\n    handleSort,\n    validatePlayerAdd\n  };\n}; "],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,QAAQ,uBAAuB;AAEhD,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC;IAAEY,GAAG,EAAE,IAAI;IAAEC,SAAS,EAAE;EAAY,CAAC,CAAC;EACnF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;;EAE7C;EACA,MAAMgB,iBAAiB,GAAIC,OAAO,IAAK;IACrC,MAAMC,OAAO,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnE,MAAMC,IAAI,GAAG,CAAC,GAAG,IAAIJ,GAAG,CAACF,OAAO,CAACG,GAAG,CAACC,GAAG,IAAIG,QAAQ,CAACH,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE1E,MAAMG,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIC,GAAG,IAAIH,IAAI,EAAE;MACpB,KAAK,IAAII,MAAM,IAAIT,OAAO,EAAE;QAC1B,MAAMU,MAAM,GAAGX,OAAO,CAACY,IAAI,CAACR,GAAG,IAAIA,GAAG,CAACS,UAAU,CAAC,GAAGH,MAAM,IAAID,GAAG,IAAI,CAAC,CAAC;QACxE,IAAIE,MAAM,EAAEH,MAAM,CAACM,IAAI,CAACH,MAAM,CAAC;MACjC;IACF;IACA,OAAOH,MAAM;EACf,CAAC;EAED,MAAMO,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA,MAAMC,aAAa,GAAG,IAAId,GAAG,CAC3Bb,aAAa,CAACc,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC5C,CAAC,CAACY,IAAI;;IAEN;IACA,IAAID,aAAa,IAAI,CAAC,EAAE;MACtBE,KAAK,CAAC,+BAA+B,CAAC;MACtC;IACF;;IAEA;IACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGL,aAAa,CAAC;;IAE1D;IACA,MAAMM,UAAU,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE5B;IAAU,CAAC,EAAE,CAAC6B,CAAC,EAAEC,CAAC,KACxD,GAAGR,UAAU,IAAIQ,CAAC,GAAG,CAAC,OACxB,CAAC;;IAED;IACA,MAAMC,OAAO,GAAGzC,IAAI,CAACgB,GAAG,CAAC0B,CAAC,IAAI;MAC5B,MAAMC,aAAa,GAAG,CAAC,CAAC;MACxBR,UAAU,CAACS,OAAO,CAACC,MAAM,IAAI;QAC3BF,aAAa,CAACE,MAAM,CAAC,GAAGT,KAAK,CAAC,CAAC,CAAC,CAACU,IAAI,CAAC,CAAC,CAAC;MAC1C,CAAC,CAAC;MACF,OAAO;QACL,GAAGJ,CAAC;QACJK,OAAO,EAAE;UAAE,GAAGL,CAAC,CAACK,OAAO;UAAE,GAAGJ;QAAc;MAC5C,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMK,UAAU,GAAGpC,iBAAiB,CAAC,CAAC,GAAGV,aAAa,EAAE,GAAGiC,UAAU,CAAC,CAAC;IACvEhC,gBAAgB,CAAC6C,UAAU,CAAC;IAC5B/C,OAAO,CAACwC,OAAO,CAAC;EAClB,CAAC;EAED,MAAMQ,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI,CAAC/C,aAAa,CAACoC,MAAM,EAAE;IAE3B,IAAI,CAACY,MAAM,CAACC,OAAO,CAAC,4CAA4C,CAAC,EAAE;MACjE;IACF;;IAEA;IACA,MAAMC,UAAU,GAAG,CAAC,GAAG,IAAIrC,GAAG,CAACb,aAAa,CAACc,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACmC,GAAG,CAAC,CAAC;;IAElF;IACA,MAAMC,OAAO,GAAGpD,aAAa,CAACqD,MAAM,CAACtC,GAAG,IAAI,CAACA,GAAG,CAACS,UAAU,CAAC0B,UAAU,CAAC,CAAC;IAExE,MAAMX,OAAO,GAAGzC,IAAI,CAACgB,GAAG,CAAC0B,CAAC,IAAI;MAC5B,MAAMc,CAAC,GAAG;QAAE,GAAGd,CAAC,CAACK;MAAQ,CAAC;MAC1B7C,aAAa,CAACqD,MAAM,CAACtC,GAAG,IAAIA,GAAG,CAACS,UAAU,CAAC0B,UAAU,CAAC,CAAC,CAACR,OAAO,CAAC3B,GAAG,IAAI;QACrE,OAAOuC,CAAC,CAACvC,GAAG,CAAC;MACf,CAAC,CAAC;MACF,MAAMwC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACH,CAAC,CAAC,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACF,MAAM,CAAC,CAACG,CAAC,EAACC,CAAC,KAAGD,CAAC,IAAEC,CAAC,IAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MAC9F,OAAO;QAAE,GAAGtB,CAAC;QAAEK,OAAO,EAAES,CAAC;QAAES,KAAK,EAAER;MAAS,CAAC;IAC9C,CAAC,CAAC;IAEFtD,gBAAgB,CAACmD,OAAO,CAAC;IACzBrD,OAAO,CAACwC,OAAO,CAAC;EAClB,CAAC;EAED,MAAMyB,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,YAAY,GAAGzD,SAAS,GAAG,CAAC;IAClC,MAAM0D,qBAAqB,GAAG,IAAIrD,GAAG,CACnCb,aAAa,CAACc,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC5C,CAAC;;IAED;IACA,MAAMiB,UAAU,GAAGC,KAAK,CAACC,IAAI,CAAC+B,qBAAqB,CAAC,CAACpD,GAAG,CACtDO,MAAM,IAAI,GAAGA,MAAM,IAAI4C,YAAY,OACrC,CAAC;IAED,MAAM1B,OAAO,GAAGzC,IAAI,CAACgB,GAAG,CAAC0B,CAAC,IAAI;MAC5B,MAAMC,aAAa,GAAG,CAAC,CAAC;MACxBR,UAAU,CAACS,OAAO,CAACC,MAAM,IAAI;QAC3BF,aAAa,CAACE,MAAM,CAAC,GAAGT,KAAK,CAAC,CAAC,CAAC,CAACU,IAAI,CAAC,CAAC,CAAC;MAC1C,CAAC,CAAC;MACF,OAAO;QACL,GAAGJ,CAAC;QACJK,OAAO,EAAE;UAAE,GAAGL,CAAC,CAACK,OAAO;UAAE,GAAGJ;QAAc;MAC5C,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMK,UAAU,GAAGpC,iBAAiB,CAAC,CAAC,GAAGV,aAAa,EAAE,GAAGiC,UAAU,CAAC,CAAC;IACvEhC,gBAAgB,CAAC6C,UAAU,CAAC;IAC5B/C,OAAO,CAACwC,OAAO,CAAC;IAChB9B,YAAY,CAACwD,YAAY,CAAC;EAC5B,CAAC;EAED,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI3D,SAAS,IAAI,CAAC,EAAE;MAClBqB,KAAK,CAAC,mBAAmB,CAAC;MAC1B;IACF;IAEA,IAAI,CAACmB,MAAM,CAACC,OAAO,CAAC,GAAGzC,SAAS,iCAAiC,CAAC,EAAE;MAClE;IACF;;IAEA;IACA,MAAM4C,OAAO,GAAGpD,aAAa,CAACqD,MAAM,CAACtC,GAAG,IAAI,CAACA,GAAG,CAACqD,QAAQ,CAAC,IAAI5D,SAAS,IAAI,CAAC,CAAC;IAE7E,MAAM+B,OAAO,GAAGzC,IAAI,CAACgB,GAAG,CAAC0B,CAAC,IAAI;MAC5B,MAAMc,CAAC,GAAG;QAAE,GAAGd,CAAC,CAACK;MAAQ,CAAC;MAC1B7C,aAAa,CAACqD,MAAM,CAACtC,GAAG,IAAIA,GAAG,CAACqD,QAAQ,CAAC,IAAI5D,SAAS,IAAI,CAAC,CAAC,CAACkC,OAAO,CAAC3B,GAAG,IAAI;QAC1E,OAAOuC,CAAC,CAACvC,GAAG,CAAC;MACf,CAAC,CAAC;MACF,MAAMwC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACH,CAAC,CAAC,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACF,MAAM,CAAC,CAACG,CAAC,EAACC,CAAC,KAAGD,CAAC,IAAEC,CAAC,IAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MAC9F,OAAO;QAAE,GAAGtB,CAAC;QAAEK,OAAO,EAAES,CAAC;QAAES,KAAK,EAAER;MAAS,CAAC;IAC9C,CAAC,CAAC;IAEFtD,gBAAgB,CAACmD,OAAO,CAAC;IACzBrD,OAAO,CAACwC,OAAO,CAAC;IAChB9B,YAAY,CAACD,SAAS,GAAG,CAAC,CAAC;EAC7B,CAAC;;EAED;EACA,MAAM6D,iBAAiB,GAAIC,SAAS,IAAK;IACvC;IACA,MAAMC,gBAAgB,GAAGzE,IAAI,CAACuD,MAAM,CAACb,CAAC,IAAIA,CAAC,CAACgC,KAAK,KAAKF,SAAS,CAACE,KAAK,CAAC;IACtE,IAAID,gBAAgB,CAACnC,MAAM,IAAI,CAAC,EAAE;MAChCP,KAAK,CAAC,2BAA2B,CAAC;MAClC,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC;EAED,MAAM4C,UAAU,GAAInE,GAAG,IAAK;IAC1B,IAAIC,SAAS,GAAG,WAAW;IAC3B,IAAIH,UAAU,CAACE,GAAG,KAAKA,GAAG,IAAIF,UAAU,CAACG,SAAS,KAAK,WAAW,EAAE;MAClEA,SAAS,GAAG,YAAY;IAC1B;IACAF,aAAa,CAAC;MAAEC,GAAG;MAAEC;IAAU,CAAC,CAAC;IAEjC,MAAMmE,UAAU,GAAG/E,QAAQ,CAACG,IAAI,EAAEQ,GAAG,EAAEC,SAAS,CAAC;IACjDR,OAAO,CAAC2E,UAAU,CAAC;EACrB,CAAC;EAED,OAAO;IACL5E,IAAI;IACJC,OAAO;IACPC,aAAa;IACbC,gBAAgB;IAChBC,cAAc;IACdC,iBAAiB;IACjBK,SAAS;IACTC,YAAY;IACZiB,eAAe;IACfqB,kBAAkB;IAClBiB,YAAY;IACZG,eAAe;IACfM,UAAU;IACVJ;EACF,CAAC;AACH,CAAC;AAACxE,EAAA,CApLWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}