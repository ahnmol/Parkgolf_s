{"ast":null,"code":"import _objectSpread from\"C:/Users/tkaak/Documents/GitHub/parkgolf_js/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{businessCardStyles}from'../styles/businessCardStyles';export const renderBusinessCards=(rows,tournamentName)=>{return\"\\n    <html>\\n      <head>\\n        <meta charset=\\\"utf-8\\\">\\n        <title>\\uBA85\\uD568 \\uC778\\uC1C4</title>\\n        <style>\".concat(businessCardStyles.printStyles,\"</style>\\n      </head>\\n      <body>\\n        \").concat(Array.from({length:Math.ceil(rows.length/9)},(_,pageIndex)=>{const pageRows=rows.slice(pageIndex*9,(pageIndex+1)*9);if(pageRows.length===0)return'';return\"\\n            <div class=\\\"page\\\" style=\\\"\".concat(styleToString(businessCardStyles.page),\"\\\">\\n              <div class=\\\"card-container\\\" style=\\\"\").concat(styleToString(businessCardStyles.cardContainer),\"\\\">\\n                \").concat(pageRows.map(row=>\"\\n                  <div class=\\\"card\\\" style=\\\"\".concat(styleToString(businessCardStyles.card),\"\\\">\\n                    <div class=\\\"card-header\\\" style=\\\"\").concat(styleToString(businessCardStyles.cardHeader),\"\\\">\").concat(tournamentName,\"</div>\\n                    <div class=\\\"card-content\\\" style=\\\"\").concat(styleToString(businessCardStyles.cardContent),\"\\\">\\n                      <div class=\\\"cell\\\" style=\\\"\").concat(styleToString(_objectSpread(_objectSpread({},businessCardStyles.cell),{},{borderBottom:'1px solid black'})),\"\\\">\").concat(row.group,\"\\uADF8\\uB8F9</div>\\n                      <div class=\\\"cell\\\" style=\\\"\").concat(styleToString(_objectSpread(_objectSpread({},businessCardStyles.cell),{},{borderRight:'none',borderBottom:'1px solid black',fontSize:'32px'})),\"\\\">\").concat(row.region,\"</div>\\n                      <div class=\\\"cell\\\" style=\\\"\").concat(styleToString(_objectSpread(_objectSpread({},businessCardStyles.cell),{},{borderBottom:'none'})),\"\\\">\").concat(row.startCourse,\"</div>\\n                      <div class=\\\"cell\\\" style=\\\"\").concat(styleToString(_objectSpread(_objectSpread({},businessCardStyles.cell),{},{borderRight:'none',borderBottom:'none',fontSize:'60px',lineHeight:'0.9',padding:'0'})),\"\\\">\").concat(row.name,\"</div>\\n                    </div>\\n                  </div>\\n                \")).join(''),\"\\n              </div>\\n            </div>\\n          \");}).filter(Boolean).join(''),\"\\n      </body>\\n    </html>\\n  \");};// React 스타일 객체를 CSS 문자열로 변환하는 헬퍼 함수\nconst styleToString=style=>{return Object.entries(style).map(_ref=>{let[key,value]=_ref;return\"\".concat(kebabCase(key),\": \").concat(value);}).join('; ');};// camelCase를 kebab-case로 변환하는 헬퍼 함수\nconst kebabCase=str=>{return str.replace(/([a-z0-9])([A-Z])/g,'$1-$2').toLowerCase();};","map":{"version":3,"names":["businessCardStyles","renderBusinessCards","rows","tournamentName","concat","printStyles","Array","from","length","Math","ceil","_","pageIndex","pageRows","slice","styleToString","page","cardContainer","map","row","card","cardHeader","cardContent","_objectSpread","cell","borderBottom","group","borderRight","fontSize","region","startCourse","lineHeight","padding","name","join","filter","Boolean","style","Object","entries","_ref","key","value","kebabCase","str","replace","toLowerCase"],"sources":["C:/Users/tkaak/Documents/GitHub/parkgolf_js/src/utils/businessCardUtils.js"],"sourcesContent":["import { businessCardStyles } from '../styles/businessCardStyles';\r\n\r\nexport const renderBusinessCards = (rows, tournamentName) => {\r\n  return `\r\n    <html>\r\n      <head>\r\n        <meta charset=\"utf-8\">\r\n        <title>명함 인쇄</title>\r\n        <style>${businessCardStyles.printStyles}</style>\r\n      </head>\r\n      <body>\r\n        ${Array.from({ length: Math.ceil(rows.length / 9) }, (_, pageIndex) => {\r\n          const pageRows = rows.slice(pageIndex * 9, (pageIndex + 1) * 9);\r\n          if (pageRows.length === 0) return '';\r\n          return `\r\n            <div class=\"page\" style=\"${styleToString(businessCardStyles.page)}\">\r\n              <div class=\"card-container\" style=\"${styleToString(businessCardStyles.cardContainer)}\">\r\n                ${pageRows.map(row => `\r\n                  <div class=\"card\" style=\"${styleToString(businessCardStyles.card)}\">\r\n                    <div class=\"card-header\" style=\"${styleToString(businessCardStyles.cardHeader)}\">${tournamentName}</div>\r\n                    <div class=\"card-content\" style=\"${styleToString(businessCardStyles.cardContent)}\">\r\n                      <div class=\"cell\" style=\"${styleToString({...businessCardStyles.cell, borderBottom: '1px solid black'})}\">${row.group}그룹</div>\r\n                      <div class=\"cell\" style=\"${styleToString({...businessCardStyles.cell, borderRight: 'none', borderBottom: '1px solid black', fontSize: '32px'})}\">${row.region}</div>\r\n                      <div class=\"cell\" style=\"${styleToString({...businessCardStyles.cell, borderBottom: 'none'})}\">${row.startCourse}</div>\r\n                      <div class=\"cell\" style=\"${styleToString({...businessCardStyles.cell, borderRight: 'none', borderBottom: 'none', fontSize: '60px', lineHeight: '0.9', padding: '0'})}\">${row.name}</div>\r\n                    </div>\r\n                  </div>\r\n                `).join('')}\r\n              </div>\r\n            </div>\r\n          `;\r\n        }).filter(Boolean).join('')}\r\n      </body>\r\n    </html>\r\n  `;\r\n};\r\n\r\n// React 스타일 객체를 CSS 문자열로 변환하는 헬퍼 함수\r\nconst styleToString = (style) => {\r\n  return Object.entries(style)\r\n    .map(([key, value]) => `${kebabCase(key)}: ${value}`)\r\n    .join('; ');\r\n};\r\n\r\n// camelCase를 kebab-case로 변환하는 헬퍼 함수\r\nconst kebabCase = (str) => {\r\n  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\r\n}; "],"mappings":"gIAAA,OAASA,kBAAkB,KAAQ,8BAA8B,CAEjE,MAAO,MAAM,CAAAC,mBAAmB,CAAGA,CAACC,IAAI,CAAEC,cAAc,GAAK,CAC3D,wIAAAC,MAAA,CAKeJ,kBAAkB,CAACK,WAAW,oDAAAD,MAAA,CAGrCE,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAEC,IAAI,CAACC,IAAI,CAACR,IAAI,CAACM,MAAM,CAAG,CAAC,CAAE,CAAC,CAAE,CAACG,CAAC,CAAEC,SAAS,GAAK,CACrE,KAAM,CAAAC,QAAQ,CAAGX,IAAI,CAACY,KAAK,CAACF,SAAS,CAAG,CAAC,CAAE,CAACA,SAAS,CAAG,CAAC,EAAI,CAAC,CAAC,CAC/D,GAAIC,QAAQ,CAACL,MAAM,GAAK,CAAC,CAAE,MAAO,EAAE,CACpC,mDAAAJ,MAAA,CAC6BW,aAAa,CAACf,kBAAkB,CAACgB,IAAI,CAAC,8DAAAZ,MAAA,CAC1BW,aAAa,CAACf,kBAAkB,CAACiB,aAAa,CAAC,0BAAAb,MAAA,CAChFS,QAAQ,CAACK,GAAG,CAACC,GAAG,qDAAAf,MAAA,CACWW,aAAa,CAACf,kBAAkB,CAACoB,IAAI,CAAC,iEAAAhB,MAAA,CAC7BW,aAAa,CAACf,kBAAkB,CAACqB,UAAU,CAAC,QAAAjB,MAAA,CAAKD,cAAc,qEAAAC,MAAA,CAC9DW,aAAa,CAACf,kBAAkB,CAACsB,WAAW,CAAC,4DAAAlB,MAAA,CACnDW,aAAa,CAAAQ,aAAA,CAAAA,aAAA,IAAKvB,kBAAkB,CAACwB,IAAI,MAAEC,YAAY,CAAE,iBAAiB,EAAC,CAAC,QAAArB,MAAA,CAAKe,GAAG,CAACO,KAAK,2EAAAtB,MAAA,CAC1FW,aAAa,CAAAQ,aAAA,CAAAA,aAAA,IAAKvB,kBAAkB,CAACwB,IAAI,MAAEG,WAAW,CAAE,MAAM,CAAEF,YAAY,CAAE,iBAAiB,CAAEG,QAAQ,CAAE,MAAM,EAAC,CAAC,QAAAxB,MAAA,CAAKe,GAAG,CAACU,MAAM,+DAAAzB,MAAA,CAClIW,aAAa,CAAAQ,aAAA,CAAAA,aAAA,IAAKvB,kBAAkB,CAACwB,IAAI,MAAEC,YAAY,CAAE,MAAM,EAAC,CAAC,QAAArB,MAAA,CAAKe,GAAG,CAACW,WAAW,+DAAA1B,MAAA,CACrFW,aAAa,CAAAQ,aAAA,CAAAA,aAAA,IAAKvB,kBAAkB,CAACwB,IAAI,MAAEG,WAAW,CAAE,MAAM,CAAEF,YAAY,CAAE,MAAM,CAAEG,QAAQ,CAAE,MAAM,CAAEG,UAAU,CAAE,KAAK,CAAEC,OAAO,CAAE,GAAG,EAAC,CAAC,QAAA5B,MAAA,CAAKe,GAAG,CAACc,IAAI,kFAGtL,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,2DAInB,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAACF,IAAI,CAAC,EAAE,CAAC,qCAInC,CAAC,CAED;AACA,KAAM,CAAAnB,aAAa,CAAIsB,KAAK,EAAK,CAC/B,MAAO,CAAAC,MAAM,CAACC,OAAO,CAACF,KAAK,CAAC,CACzBnB,GAAG,CAACsB,IAAA,MAAC,CAACC,GAAG,CAAEC,KAAK,CAAC,CAAAF,IAAA,UAAApC,MAAA,CAAQuC,SAAS,CAACF,GAAG,CAAC,OAAArC,MAAA,CAAKsC,KAAK,GAAE,CAAC,CACpDR,IAAI,CAAC,IAAI,CAAC,CACf,CAAC,CAED;AACA,KAAM,CAAAS,SAAS,CAAIC,GAAG,EAAK,CACzB,MAAO,CAAAA,GAAG,CAACC,OAAO,CAAC,oBAAoB,CAAE,OAAO,CAAC,CAACC,WAAW,CAAC,CAAC,CACjE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}