{"ast":null,"code":"export const calculateTotal=courses=>{return Object.values(courses).reduce((sum,arr)=>sum+arr.reduce((a,b)=>a+(b||0),0),0);};// 코스별 점수 합계를 계산하는 함수\nconst calculateCourseTotal=(courses,courseName)=>{var _courses$courseName;return((_courses$courseName=courses[courseName])===null||_courses$courseName===void 0?void 0:_courses$courseName.reduce((sum,score)=>sum+(score||0),0))||0;};// 두 선수를 비교하는 함수\nconst compareRows=(a,b)=>{const aTotal=a.total||0;const bTotal=b.total||0;if(aTotal!==bTotal){return aTotal-bTotal;}// 총점이 같을 경우 코스별로 비교 (D > C > B > A 순서)\nconst courseOrder=['D','C','B','A'];for(const courseLetter of courseOrder){// 각 일차의 해당 코스 점수를 비교\nconst aCourseScores=Object.keys(a.courses).filter(key=>key.startsWith(courseLetter+'_')).map(key=>calculateCourseTotal(a.courses,key));const bCourseScores=Object.keys(b.courses).filter(key=>key.startsWith(courseLetter+'_')).map(key=>calculateCourseTotal(b.courses,key));// 해당 코스가 존재하면 비교\nif(aCourseScores.length>0&&bCourseScores.length>0){const aCourseTotal=aCourseScores.reduce((sum,score)=>sum+score,0);const bCourseTotal=bCourseScores.reduce((sum,score)=>sum+score,0);if(aCourseTotal!==bCourseTotal){return aCourseTotal-bCourseTotal;}}}return 0;// 모든 코스가 같으면 동점\n};export const getRank=(targetRow,allRows)=>{let rank=1;allRows.forEach(row=>{if(compareRows(targetRow,row)>0)rank++;});return rank;};export const sortRows=(rows,key,direction)=>{return[...rows].sort((a,b)=>{let aVal,bVal;switch(key){case'조':aVal=parseInt(a.group)||0;bVal=parseInt(b.group)||0;break;case'성명':aVal=a.name||'';bVal=b.name||'';break;case'시/도':aVal=a.region||'';bVal=b.region||'';break;case'시작코스':aVal=a.startCourse||'';bVal=b.startCourse||'';break;case'총 합계':case'순위':const comparison=compareRows(a,b);return direction==='ascending'?comparison:-comparison;default:if(key.includes('일차')&&a.courses&&b.courses){aVal=(a.courses[key]||[]).reduce((sum,score)=>sum+(parseInt(score)||0),0);bVal=(b.courses[key]||[]).reduce((sum,score)=>sum+(parseInt(score)||0),0);}else{aVal='';bVal='';}}if(typeof aVal==='number'&&typeof bVal==='number'){return direction==='ascending'?aVal-bVal:bVal-aVal;}return direction==='ascending'?String(aVal).localeCompare(String(bVal),'ko'):String(bVal).localeCompare(String(aVal),'ko');});};","map":{"version":3,"names":["calculateTotal","courses","Object","values","reduce","sum","arr","a","b","calculateCourseTotal","courseName","_courses$courseName","score","compareRows","aTotal","total","bTotal","courseOrder","courseLetter","aCourseScores","keys","filter","key","startsWith","map","bCourseScores","length","aCourseTotal","bCourseTotal","getRank","targetRow","allRows","rank","forEach","row","sortRows","rows","direction","sort","aVal","bVal","parseInt","group","name","region","startCourse","comparison","includes","String","localeCompare"],"sources":["C:/Users/tkaak/Documents/GitHub/parkgolf_js/src/utils/calculations.js"],"sourcesContent":["export const calculateTotal = (courses) => {\n  return Object.values(courses).reduce(\n    (sum, arr) => sum + arr.reduce((a,b)=>a+(b||0), 0),\n    0\n  );\n};\n\n// 코스별 점수 합계를 계산하는 함수\nconst calculateCourseTotal = (courses, courseName) => {\n  return courses[courseName]?.reduce((sum, score) => sum + (score || 0), 0) || 0;\n};\n\n// 두 선수를 비교하는 함수\nconst compareRows = (a, b) => {\n  const aTotal = a.total || 0;\n  const bTotal = b.total || 0;\n\n  if (aTotal !== bTotal) {\n    return aTotal - bTotal;\n  }\n\n  // 총점이 같을 경우 코스별로 비교 (D > C > B > A 순서)\n  const courseOrder = ['D', 'C', 'B', 'A'];\n  for (const courseLetter of courseOrder) {\n    // 각 일차의 해당 코스 점수를 비교\n    const aCourseScores = Object.keys(a.courses)\n      .filter(key => key.startsWith(courseLetter + '_'))\n      .map(key => calculateCourseTotal(a.courses, key));\n    const bCourseScores = Object.keys(b.courses)\n      .filter(key => key.startsWith(courseLetter + '_'))\n      .map(key => calculateCourseTotal(b.courses, key));\n    \n    // 해당 코스가 존재하면 비교\n    if (aCourseScores.length > 0 && bCourseScores.length > 0) {\n      const aCourseTotal = aCourseScores.reduce((sum, score) => sum + score, 0);\n      const bCourseTotal = bCourseScores.reduce((sum, score) => sum + score, 0);\n      \n      if (aCourseTotal !== bCourseTotal) {\n        return aCourseTotal - bCourseTotal;\n      }\n    }\n  }\n  return 0; // 모든 코스가 같으면 동점\n};\n\nexport const getRank = (targetRow, allRows) => {\n  let rank = 1;\n  allRows.forEach(row => {\n    if (compareRows(targetRow, row) > 0) rank++;\n  });\n  return rank;\n};\n\nexport const sortRows = (rows, key, direction) => {\n  return [...rows].sort((a, b) => {\n    let aVal, bVal;\n    \n    switch (key) {\n      case '조': \n        aVal = parseInt(a.group) || 0;\n        bVal = parseInt(b.group) || 0;\n        break;\n      case '성명': aVal = a.name || ''; bVal = b.name || ''; break;\n      case '시/도': aVal = a.region || ''; bVal = b.region || ''; break;\n      case '시작코스': aVal = a.startCourse || ''; bVal = b.startCourse || ''; break;\n      case '총 합계': \n      case '순위':\n        const comparison = compareRows(a, b);\n        return direction === 'ascending' ? comparison : -comparison;\n      default:\n        if (key.includes('일차') && a.courses && b.courses) {\n          aVal = (a.courses[key] || []).reduce((sum, score) => sum + (parseInt(score) || 0), 0);\n          bVal = (b.courses[key] || []).reduce((sum, score) => sum + (parseInt(score) || 0), 0);\n        } else {\n          aVal = ''; bVal = '';\n        }\n    }\n\n    if (typeof aVal === 'number' && typeof bVal === 'number') {\n      return direction === 'ascending' ? aVal - bVal : bVal - aVal;\n    }\n    \n    return direction === 'ascending'\n      ? String(aVal).localeCompare(String(bVal), 'ko')\n      : String(bVal).localeCompare(String(aVal), 'ko');\n  });\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}